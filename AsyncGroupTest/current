@Test
void testCreateGroupsAsync_Unauthorized_ParseException() throws Exception {
    // Arrange
    List<SecurityManagerEntitlementEntity> entities = List.of(new SecurityManagerEntitlementEntity());
    entities.get(0).setDisplayName("Group-<ClientID>");
    entities.get(0).setDescription("Desc-<ClientID>-<ClientName>");
    when(entitlementRepo.findAll()).thenReturn(entities);
    when(userService.getFreshAccessToken()).thenReturn("access123");

    // Mock unauthorized exception with invalid JSON that triggers ParseException
    FeignException.Unauthorized unauthorized = mock(FeignException.Unauthorized.class);
    when(unauthorized.contentUTF8()).thenReturn("invalid-json");

    when(saviyntClient.updateEntitlementsOnUser(any(), any())).thenThrow(unauthorized);

    try (MockedStatic<StartAnywhereSecurityUtil> secUtil = mockStatic(StartAnywhereSecurityUtil.class)) {
        secUtil.when(() -> StartAnywhereSecurityUtil.unCleanIt(any())).thenReturn("{}");

        try (MockedStatic<RequestHeader> reqHeader = mockStatic(RequestHeader.class)) {
            RequestHeader header = new RequestHeader();
            header.setCorrelationId("corr123");
            reqHeader.when(() -> RequestHeader.parse(any())).thenReturn(header);

            when(trackRepo.findByCorrelationIdAndClientId(any(), any())).thenReturn(null);

            // Act + Assert
            assertDoesNotThrow(() ->
                service.createGroupsAsync("session", "{}", "client123", "ClientX")
            );
        }
    }
}
